Multiplication of 8-bit numbers:
================================

Algorithm:
=========

mult(0,y)    = 0
mult(2x,y)   = mult(x,y) << 1
mult(2x+1,y) = mult(2x,y) + y

Pseudocode:
==========

mult(x,y) {
	if(x==0) return 0;
	if(!(x & 1)) return mult(x >> 1, y) << 1;
	return mult(x - 1, y) + y;
}

Refactoring:
===========

mult(x,y) {
	if(x==0) return 0;
	t1=x & 1;
	if(t1!=0) goto L1;
	t2=x >> 1;
	t3=mult(t2,y);
	t4=t3 << 1;
	return t4;
L1:
	t5=x-1;
	t6=mult(t5,y);
	t7=t6+y;
	return t7;
}

Liveness:
========

mult(x,y) {
	if(x == 0) return 0;
	t = x & 1;
	if(t != 0) goto L1;
	x = x >> 1;
	x = mult(x,y);
	x = x << 1;
	return x;
L1:
	x = x - 1;
	x = mult(x,y);
	x = x + y;
	return x;
}

MULT: /* HL = x, C = y */
	LD A,H
	CP L
	RET Z
	BIT 0,L
	JR NZ, X_IS_ODD
	SRL H
	RR L
	CALL MULT
	SLA L
	RL H
	RET
X_IS_ODD:
	LD A,L
	OR A
	JR NZ, DONT_DEC_H
	DEC H
DONT_DEC_H:
	DEC L
	CALL MULT
	LD B,0
	ADD HL,BC
	RET
